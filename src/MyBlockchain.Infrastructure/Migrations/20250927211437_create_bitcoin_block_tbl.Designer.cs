// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlockchain.Infrastructure.Data;

#nullable disable

namespace MyBlockchain.Infrastructure.Migrations
{
    [DbContext(typeof(BlockCypherDbContext))]
    [Migration("20250927211437_create_bitcoin_block_tbl")]
    partial class create_bitcoin_block_tbl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.20");

            modelBuilder.Entity("MyBlockchain.Domain.Entities.ApiAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("QueryString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestBody")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ApiAudits", (string)null);
                });

            modelBuilder.Entity("MyBlockchain.Domain.Entities.BitCoinBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HighFeePerKb")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastForkHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LastForkHeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LatestUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LowFeePerKb")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediumFeePerKb")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PeerCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreviousUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnconfirmedCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BitCoinBlocks", (string)null);
                });

            modelBuilder.Entity("MyBlockchain.Domain.Entities.BtcBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HighFeePerKb")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastForkHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LastForkHeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LatestUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LowFeePerKb")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediumFeePerKb")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PeerCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreviousUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnconfirmedCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BtcBlocks", (string)null);
                });

            modelBuilder.Entity("MyBlockchain.Domain.Entities.DashBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HighFeePerKb")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastForkHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LastForkHeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LatestUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LowFeePerKb")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediumFeePerKb")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PeerCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreviousUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnconfirmedCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DashBlocks", (string)null);
                });

            modelBuilder.Entity("MyBlockchain.Domain.Entities.EthBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("BaseFee")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<long>("HighGasPrice")
                        .HasColumnType("INTEGER");

                    b.Property<long>("HighPriorityFee")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastForkHash")
                        .HasColumnType("TEXT");

                    b.Property<long>("LastForkHeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LatestUrl")
                        .HasColumnType("TEXT");

                    b.Property<long>("LowGasPrice")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LowPriorityFee")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MediumGasPrice")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MediumPriorityFee")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("PeerCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreviousHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreviousUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnconfirmedCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EthBlocks", (string)null);
                });

            modelBuilder.Entity("MyBlockchain.Domain.Entities.LtcBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HighFeePerKb")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastForkHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LastForkHeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LatestUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LowFeePerKb")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediumFeePerKb")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PeerCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreviousUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnconfirmedCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LtcBlocks");
                });
#pragma warning restore 612, 618
        }
    }
}
